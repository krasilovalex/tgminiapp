import json
import os
import requests
import time
import random
import feedparser
import telebot
import xml.etree.ElementTree as ET
from translate import Translator
from ollama_api import OLLAMA_API_URL
from bot import bot

# data file
DATA_FILE = "user_history.json"


# themes
THEMES = [
    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö ‚Äî –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤",
    "–ì–∏–±—Ä–∏–¥–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞ ‚Äî –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
    "–≠—Ç–∏–∫–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π ‚Äî –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤",
    "–ë—É–¥—É—â–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–µ–Ω–µ—Ä–∞ ‚Äî –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–±–æ—Ç—ã, —Ä–∞–∑–≤–∏—Ç–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
    "–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ ‚Äî —Ä–∞–∑–±–æ—Ä —Ö–æ–¥–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –º–æ–¥–µ–ª–∏, –≤—ã—è–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫",
    "–¢–∏–ø—ã –ø—Ä–æ–º–ø—Ç–æ–≤",
    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞",
    "RAG",
    "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞",
    "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã",
    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö",
    "–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞",
    "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–æ–º–ø—Ç–∏–Ω–≥–∞",
    "–†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ LLM-–º–æ–¥–µ–ª—è–º–∏",
    "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–º–ø—Ç–æ–≤"
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
def get_additional_materials_for_topic_with_llama(topic, lang="ru"):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è LLaMA —Å —Ç–µ–º–æ–π
    prompt = f"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–µ: {topic}. –í–∫–ª—é—á–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã, —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã.\n\n–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ LLaMA API
    payload = {
        "model": "llama3",
        "prompt": prompt,
        "stream": False,
        "options": {
            "temperature": 0.7,
            "language": lang
        }
    }

    try:
        response = requests.post(OLLAMA_API_URL, json=payload, timeout=300)
        response_data = response.json()
        time.sleep(5)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        llama_response = response_data.get("response", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")
        
        # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª—ã, –º–æ–∂–Ω–æ –∏—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç—å
        return llama_response

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Ollama: {e}"
    except requests.exceptions.ReadTimeout:
        return "–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except requests.exceptions.RequestException as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"







      




# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å —Ç–µ—Å—Ç–∞–º–∏!

def load_tests():
        with open("tests.json", "r", encoding="utf-8") as file:
            return json.load(file)
        
    

def get_test_for_theme(user_id):
    data = load_data()
    user_data = data["users"].get(str(user_id))

    if not user_data:
        return "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start!"

    completed_themes = user_data["progress"]["completed_themes"]
    completed_tests = user_data["progress"].get("completed_tests", [])

    if not completed_themes:
        return "–í—ã –µ—â–µ –Ω–µ –∏–∑—É—á–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã! –ù–∞—á–Ω–∏—Ç–µ —Å /theme."

    theme = random.choice(completed_themes)
    tests = load_tests()

    if theme not in tests or not tests[theme]:
        return "–î–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤."

    if theme in completed_tests:
        return "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã!"  # –ï—Å–ª–∏ —Ç–µ—Å—Ç –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω    

    return theme, tests[theme]  # ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫–æ—Ä—Ç–µ–∂–∞






      


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö 
def load_data():
    if not os.path.exists(DATA_FILE):
        return{"users":{}}
    with open(DATA_FILE, "r", encoding="utf-8") as file:
        return json.load(file)
    
# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4, ensure_ascii=False)

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id,username):
    data = load_data()
    if str(user_id) not in data["users"]:
        data["users"][str(user_id)] = {
            "username":username,
            "progress": {
                "completed_themes": [],
                "tests_passed": 0,
                "test_results": [], # –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
                "best_prompts": []
            },
            "level": 1,
            "experience": 0,
            "achievements":[],
            "feedback":[]
        }
        save_data(data)

        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    else:
        print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥      

    if str(user_id) in data["users"]:
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω

          
        
    


# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
def update_test_results(user_id, theme, correct_answers, total_questions):
    data = load_data()
    user_data = data["users"].get(str(user_id))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á "completed_tests" –≤ "progress"
    if "completed_tests" not in user_data["progress"]:
        user_data["progress"]["completed_tests"] = []

    if user_data:
        user_data["progress"]["tests_passed"] += 1 # –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª-–≤–æ —Å–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        user_data["progress"]["completed_tests"].append(theme) 


        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
        user_data["progress"]["test_results"].append({
            "theme" : theme,
            "correct_answers" : correct_answers,
            "total_questions" : total_questions,
            "score":f"{(correct_answers / total_questions) * 100:.2f}%" # –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
        })
        save_data(data)
# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –¥–ª—è —Ç–µ–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö
                                     
 
# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
def update_progress(user_id, completed_theme=None, test_passed=False, best_prompt=None):
    data = load_data()
    user_data = data["users"].get(str(user_id))

    if user_data:
        if completed_theme and completed_theme not in user_data["progress"]["completed_themes"]:
            user_data["progress"]["completed_themes"].append(completed_theme)
    if test_passed:
        user_data["progress"]["tests_passed"] += 1
    if best_prompt:
        user_data["progress"]["best_prompts"].append(best_prompt)
    save_data(data)    


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_stats(user_id):
    data = load_data()
    user_data = data["users"].get(str(user_id))

    if not user_data:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ —Å /theme!"
    
    stats = (
        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n"
        f"üë§ *–ò–º—è:* {user_data['username']}\n"
        f"üèÜ *–£—Ä–æ–≤–µ–Ω—å:* {user_data['level']}\n"
        f"üìö *–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:* {len(user_data['progress']['completed_themes'])}\n"
        f"‚úÖ *–°–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:* {user_data['progress']['tests_passed']}\n"
    )

    if user_data["progress"]["test_results"]:
        stats += "\nüéì *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:*\n"
        for result in user_data["progress"]["test_results"][:3]:
            stats += f"- –¢–µ–º–∞ : {result['theme']} | {result['score']} ({result['correct_answers']}/{result['total_questions']})\n"

    if user_data["progress"]["best_prompts"]:
        stats += "\n‚ú® *–õ—É—á—à–∏–µ –ø—Ä–æ–º–ø—Ç—ã:*\n"
        for prompt in user_data["progress"]["best_prompts"][:3]: # TOP 3
            stats += f"- _{prompt["prompt"]}_(‚≠ê {prompt["rating"]})\n"
    return stats 


# –§—É–Ω–∫—Ü–∏—è translate

def translate_to_english(text):
    translator = Translator(to_lang="en")
    return translator.translate(text)



# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

def search_arxiv(topic):
    """–ò—â–µ—Ç –Ω–∞—É—á–µ–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –≤ ArXiv"""
    url = f"http://export.arxiv.org/api/query?search_query={topic}&start=0&max_results=1"
    response = requests.get(url)

    if response.status_code != 200:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ArXiv"
    
    root =  ET.fromstring(response.text)

    entry = root.find("{https://www.w3.org/2005/Atom}entry")
    if entry is None:
        return "–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    
    title = entry.find("{http://www.w3.org/2005/Atom}title").text
    summary =  entry.find("{http://www.w3.org/2005/Atom}summary").text
    link = entry.find("{http://www.w3.org/2005/Atom}link").attrib['href']

    authors  = [author.find("{http://www.w3.org/2005/Atom}name").text for author in entry.findall("{http://www.w3.org/2005/Atom}author")]

    authors_text = ",".join(authors)
    
    return f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}\n**–ê–≤—Ç–æ—Ä—ã:** {authors_text}\n**–°—Å—ã–ª–∫–∞:** [ArXiv]({link})\n\n**–û–ø–∏—Å–∞–Ω–∏–µ:** {summary}"






def search_medium(topic):
    """–ò—â–µ—Ç –Ω–∞—É—á–µ–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –≤ Medium —á–µ—Ä–µ–∑ RSS"""

    translated_topic = translate_to_english(topic)

    rss_url = f"https://medium.com/feed/tag/{translated_topic.replace(' ', '-')}"
    feed = feedparser.parse(rss_url)

    if not feed.entries:
        return "üî∏ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–∞ Medium –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ"
    
    results = []
    for entry in feed.entries[:3]:
        results.append(f"üîπ[{entry.title}]({entry.link})")

    return "\n".join(results)    


# –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ —é–∑–µ—Ä–∞
def update_experince(user_id, points):

    data = load_data()
    user_data = data["users"].get(str(user_id))
    user_data["progress"].setdefault("experience", 0) # –û–ø—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if not user_data:
        return
    
    user_data["progress"]["experience"] += points

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è(–Ω–∞–ø—Ä–∏–º–µ—Ä 100XP = 1lvl)
    user_data["progress"]["level"] = user_data["progress"]["experience"] // 100

    save_data(data)



#   —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
def check_achievements(user_id):
    data = load_data()
    user_data = ["users"].get(str(user_id))

    if not user_data:
        return
    
    achievements = user_data["progress"].setdefault("achievements", [])

    # –ü—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    if user_data["progress"].get("tests_completed", 0) >= 5 and "–¢–µ—Å—Ç–æ–≤—ã–π –≥—É—Ä—É" not in achievements:
        achievements.append("–¢–µ—Å—Ç–æ–≤—ã–π –≥—É—Ä—É")
        bot.send_message(user_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –¢–µ—Å—Ç–æ–≤—ã–π –≥—É—Ä—É üèÜ")

    if user_data["progress"].get("prompts_tested",0) >= 10 and "–ü—Ä–æ–º–ø—Ç-–ú–∞—Å—Ç–µ—Ä" not in achievements:
        achievements.append("–ü—Ä–æ–º–ø—Ç-–ú–∞—Å—Ç–µ—Ä")
        bot.send_message(user_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ü—Ä–æ–º–ø—Ç-–ú–∞—Å—Ç–µ—Ä üèÜ")

    save_data()    

