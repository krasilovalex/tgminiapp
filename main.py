import telebot
from telebot import util
from ollama_api import analyze_prompt_with_ollama, query_ollama_for_feedback
from wikipedia_api import get_wikipedia_summary, get_wikipedia_article_for_llama
from data_handler import load_data, save_data, register_user, update_progress, update_test_results, load_tests, THEMES, get_additional_materials_for_topic_with_llama, get_user_stats, get_test_for_theme, search_medium, search_arxiv, update_experince
from utils import get_next_theme, extract_topic_from_prompt, cache_prompt_analysis, get_cached_analysis
from keyboard import create_test_keyboard
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import re
import os
import json
from dotenv import load_dotenv
from bot import bot
import requests
import time
from flask import Flask, request, jsonify
from flask_cors import CORS
CACHE_DIR = "cache"
CACHE_EXPIRATION_TIME = 3600   # 1 HOURS




app = Flask(__name__, template_folder='.')
CORS(app)

@app.route("/analyze_prompt", methods=["POST"])

def analyze_prompt():
    data = request.json
    prompt = data['prompt']
    user_id = data['user_id']

    topic = extract_topic_from_prompt(prompt)
    wiki = get_wikipedia_article_for_llama(topic) if topic else ""
    enriched_prompt = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç :\n{wiki}\n\n–ü—Ä–æ–º–ø—Ç:\n{prompt }"
    
    llama_feedback = analyze_prompt_with_ollama(enriched_prompt)
    evaluation = evaluate_prompt(prompt)

    return jsonify({
        "feedback": llama_feedback,
        "clarity": evaluation["clarity"],
        "completeness": evaluation["completeness"],
        "specificity": evaluation["specificity"],
        "suggestions": evaluation["suggestions"]
    })

if __name__ == "__main__":
    app.run(port=5000)

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])

def handle_start(message):
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    
    register_user(user_id,username)

    # create keyboard
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üìö–ò–∑—É—á–∏—Ç—å —Ç–µ–º—ãüìö", callback_data="theme"),
        InlineKeyboardButton("‚úÖ–¢–µ—Å—Ç—ã‚úÖ", callback_data="test"),
        InlineKeyboardButton("‚ú®–õ—É—á—à–∏–µ –ø—Ä–æ–º–ø—Ç—ã‚ú®", callback_data="best_prompts"),
        InlineKeyboardButton("üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä", callback_data="stats")
    )


    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {username}! üëã\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Å–≤–æ–∏—Ç—å –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /theme –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º, /prompt –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤.\n"
        "–£–¥–∞—á–∏! üöÄ\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
        reply_markup=markup
    )



# –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

@bot.message_handler(commands=['mini'])
def open_mini_app(message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add =(InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å mini app", web_app=WebAppInfo(url='https://nfiai.netlify.app')))

# –ö–æ–º–∞–Ω–¥–∞ /examples
@bot.message_handler(commands=['examples'])
def handle_examples(message):
    examples = [
        "–ö–∞–∫ –ª—É—á—à–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?",
        "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞.",
        "–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä—Å–æ—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç?"
    ]
    bot.reply_to(message, "\n".join(examples))
# –ö–æ–º–∞–Ω–¥–∞ /theme
@bot.message_handler(commands=['theme'])
def handle_themes(message):
    user_id = message.from_user.id
    theme_message = get_next_theme(user_id)
    bot.send_message(message.chat.id, theme_message, parse_mode="Markdown")


# –ö–æ–º–∞–Ω–¥–∞ /done
@bot.message_handler(commands=["done"])
def theme_done(message):
    user_id = message.from_user.id
    theme = message.text.replace("/done","").strip()

    if not theme:
        bot.send_message(message.chat.id, "‚ö† –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã –∑–∞–≤–µ—Ä–∏—à–∏–ª–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: `/done –û—Å–Ω–æ–≤—ã –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞`", parse_mode="Markdown")
        return

    data = load_data()
    user_data = data["users"].get(str(user_id))

    if not user_data:
        bot.send_message(message.chat.id,"–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return

    if theme not in THEMES:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–π —Ç–µ–º—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /theme —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º", parse_mode="Markdown")
        return
    
    if theme in user_data["progress"]["completed_themes"]:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —ç—Ç—É —Ç–µ–º—É! üéì", parse_mode="Markdown")
        return

    user_data["progress"]["completed_themes"].append(theme)
    save_data(data)

    bot.send_message(message.chat.id, f"‚úÖ –¢–µ–º–∞ \'{theme}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–∞—è!", parse_mode="Markdown")
    update_experince(user_id, 10) # –ù–∞—á–∏—Å–ª—è–µ–º 10XP

    # dop.mat
    ##additional_materials = get_additional_materials_for_topic_with_llama(theme)
   ## bot.send_message(message.chat.id, f"üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–µ:\n\n{additional_materials}", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /stats
@bot.message_handler(commands=["stats"])
def stats(message):
    user_id = message.from_user.id
    stats_message = get_user_stats(user_id)
    bot.send_message(message.chat.id, stats_message, parse_mode="Markdown")


# –ö–æ–º–∞–Ω–¥–∞ /test
@bot.message_handler(commands=["test"])
def test(message):
    user_id = message.from_user.id
    result = get_test_for_theme(user_id)

    if isinstance(result, str):  # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ —Å—Ç—Ä–æ–∫—É (–æ—à–∏–±–∫—É)
        bot.send_message(message.chat.id, result)
        return

    theme, test = result

    if not test:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        bot.send_message(message.chat.id, "–î–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤.")
        return

    question_index = 0
    user_sessions[user_id] = {"theme": theme, "test": test, "index": question_index}

    send_question(message.chat.id, user_id)
    update_experince(user_id, 10) # –ù–∞—á–∏—Å–ª—è–µ–º 10XP

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_question(chat_id, user_id):
    session = user_sessions.get(user_id)
    if not session:
        return

    theme = session["theme"]
    test = session["test"]
    index = session["index"]


    current_question = test[index]

    if not isinstance(current_question, dict):
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    question_text = f"üìù –¢–µ–º–∞: {theme}\n\n{current_question['question']}"
    keyboard = create_test_keyboard(current_question["options"])

    bot.send_message(chat_id, question_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
@bot.callback_query_handler(func=lambda call: True,)
def handle_answer(call):
    if call.data.startswith('opt_'):
        try:
            index = int(call.data.split("_")[1])
        except ValueError:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        
        if 'test' in locals() and (index < 0 or index >= len(test)):
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å.")
            return

        user_id = call.from_user.id
        session = user_sessions.get(user_id)

        if not session:
            bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /test –∑–∞–Ω–æ–≤–æ.")
            return

        test = session["test"]
        question_index = session["index"]
        correct_answer_index = test[question_index]["correct_answer_index"]

        if index == correct_answer_index:
            bot.send_message(call.message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
            correct = True
        else:
            bot.send_message(call.message.chat.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {test[question_index]['options'][correct_answer_index]}")
            correct = False

        session["index"] += 1
        if session["index"] >= len(test):
            correct_answers = sum(1 for i in range(len(test)) if test[i]["correct_answer_index"] == index)
            update_test_results(user_id, session["theme"], correct_answers, len(test))
            bot.send_message(call.message.chat.id, f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –Ω–∞–±—Ä–∞–ª–∏ {correct_answers} –∏–∑ {len(test)} ({(correct_answers / len(test)) * 100:.2f}%)")
            del user_sessions[user_id]  
            return 

        send_question(call.message.chat.id, user_id)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'use_openai', 'use_llama')
        handle_api_choice(call)






    if call.data == "theme":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è /theme
        theme_message = get_next_theme(call.from_user.id)
        bot.send_message(call.message.chat.id, theme_message, parse_mode="Markdown")
    elif call.data == "stats":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è /stats
        user_id = call.from_user.id
        stats_message = get_user_stats(user_id)
        bot.send_message(call.message.chat.id, stats_message, parse_mode="Markdown")
    elif call.data == "best_prompts":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è /best_prompts
        user_id = call.from_user.id
        data = load_data()
        best_prompts = data["users"].get(str(user_id), {}).get("progress", {}).get("best_prompts", [])
        if best_prompts:
            best_prompt_message = "\n".join([f"–ü—Ä–æ–º–ø—Ç: {p['prompt']} (–†–µ–π—Ç–∏–Ω–≥: {p['rating']})" for p in best_prompts])
        else:
            best_prompt_message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª—É—á—à–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤."
        bot.send_message(call.message.chat.id, best_prompt_message)
    elif call.data == "test":
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è /test
        user_id = call.from_user.id
        result = get_test_for_theme(user_id)

        if isinstance(result, str):  # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ —Å—Ç—Ä–æ–∫—É (–æ—à–∏–±–∫—É)
            bot.send_message(call.message.chat.id, result)
            return

        theme, test = result

        if not test:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            bot.send_message(call.message.chat.id, "–î–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤.")
            return

        question_index = 0
        user_sessions[user_id] = {"theme": theme, "test": test, "index": question_index}

        send_question(call.message.chat.id, user_id)    
 


    

    # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
user_sessions = {}


# –ö–æ–º–∞–Ω–¥–∞ /create_prompt –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
@bot.message_handler(commands=['create_prompt'])
def create_prompt(message):
    user_id = message.from_user.id
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLaMA", callback_data='use_llama'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–º–ø—Ç–∞:", reply_markup=markup)

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ API
def handle_api_choice(call):
    user_id = call.from_user.id
    if call.data == "use_llama":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–º–æ—â—å—é LLaMA")
        bot.register_next_step_handler(msg, process_user_prompt_llama)


def evaluate_prompt(prompt):
    """"1. –ß–µ—Ç–∫–æ—Å—Ç—å, 2. –ü–æ–ª–Ω–æ—Ç–∞, 3. –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å"""
    clarity = min(10, max(3, len(prompt.split())/ 5))
    completeness = 10 if "–¥–µ—Ç–∞–ª–∏" in prompt.lower() or "–æ–ø–∏—Å–∞–Ω–∏–µ" in prompt.lower() else 7
    specificity = 10 if any(word in prompt.lower() for word in ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π", "–ø—Ä–∏–º–µ—Ä", "–¥–µ—Ç–∞–ª–∏–∑–∏—Ä—É–π"]) else 6

    suggestions = []
    if clarity < 7:
        suggestions.append("–ü–æ–ø—Ä–æ–±—É–π —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—â–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ.")
    if completeness < 8:
        suggestions.append("–î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ —É—Å–ª–æ–≤–∏–π.")
    if specificity < 7:
        suggestions.append("–£—Ç–æ—á–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–±—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.")

    return {
        "clarity": clarity,
        "completeness": completeness,
        "specificity": specificity,
        "suggestions": suggestions
    }
    

def process_user_prompt_llama(message):
    user_id = message.from_user.id
    user_prompt = message.text.strip()

    if not user_prompt:
        bot.reply_to(message, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –ø—Ä–æ–º–ø—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return


    waiting_message = bot.send_message(message.chat.id, "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –ø—Ä–æ–º–ø—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—É—é —Ç–µ–º—É –ø—Ä–æ–º–ø—Ç–∞
    topic = extract_topic_from_prompt(user_prompt)

    if not topic:
        bot.reply_to(message, "‚ö†Ô∏è–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–º—É –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–Ω–∞—á–µ.",
                               message.chat.id, waiting_message.message_id)
        return

    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ –≤ wiki
    wikipedia_info = get_wikipedia_article_for_llama(topic) if topic else "–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."

    enriched_prompt = (
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{wikipedia_info}\n\n"
        f"–ü—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{user_prompt}"
    )



    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –ø–æ–º–æ—â—å—é LLaMA

    ollama_feedback = analyze_prompt_with_ollama(enriched_prompt)

    prompt_evaluation = evaluate_prompt(user_prompt)

    feedback_message = escape_markdown(
         f"üìå *–í–∞—à –ø—Ä–æ–º–ø—Ç:*\n{user_prompt}\n\n"
        f"üìñ *–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è —Ç–µ–º–∞:* {topic}\n\n"
        f"üìä *–ê–Ω–∞–ª–∏–∑ —Å LLaMA:*\n{ollama_feedback}\n\n"
        f"üìà *–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–º–ø—Ç–∞:*\n"
        f"üîπ –ß–µ—Ç–∫–æ—Å—Ç—å: {prompt_evaluation['clarity']}/10\n"
        f"üîπ –ü–æ–ª–Ω–æ—Ç–∞: {prompt_evaluation['completeness']}/10\n"
        f"üîπ –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å: {prompt_evaluation['specificity']}/10\n\n"

    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º –æ—Ç–≤–µ—Ç–æ–º
    bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=waiting_message.message_id,
        text=feedback_message,
        parse_mode="Markdown")

    save_best_prompt(user_id, user_prompt, "LLaMA")    
    update_experince(user_id, 10) # –ù–∞—á–∏—Å–ª—è–µ–º 10XP  


def save_best_prompt(user_id, prompt, api_used):
    data = load_data()
    user_data = data["users"].get(str(user_id))

    if user_data:
        user_data["progress"]["best_prompts"].append({"prompt": prompt, "rating": 5, "api":api_used}) # Primer s reitingom
        save_data(data)

      

# –ö–æ–º–∞–Ω–¥–∞ /best_prompts –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª—É—á—à–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
@bot.message_handler(commands=['best_prompts'])
def best_prompts(message):
    user_id = message.from_user.id
    data = load_data()
    user_data = data["users"].get(str(user_id))

    if not user_data or not user_data["progress"]["best_prompts"]:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–Ω–µ–Ω—ã—Ö –ª—É—á—à–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤.")
        return
    
    prompts = user_data["progress"]["best_prompts"]
    best_prompts_message = "‚ú® –í–∞—à–∏ –ª—É—á—à–∏–µ –ø—Ä–æ–º–ø—Ç—ã:\n"
    for prompt in prompts:
        best_prompts_message += f"- _{prompt['prompt']}_(‚≠ê {prompt['rating']})\n"

    bot.send_message(message.chat.id, best_prompts_message)



# –ö–æ–º–∞–Ω–¥–∞ /materials
@bot.message_handler(commands=["materials"])
def handle_materials(message):
    user_id = message.from_user.id
    data = load_data()
    user_data = data["users"].get(str(user_id))

    if not user_data or not user_data["progress"]["completed_themes"]:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∏–∑—É—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É —á–µ—Ä–µ–∑ /theme")
        return

    last_theme = user_data["progress"]["completed_themes"][-1]  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É
    bot.send_message(message.chat.id, f"üîç –ò—â—É –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–µ: *{last_theme}*...", parse_mode="Markdown")

    arxiv_papers = search_arxiv(last_theme)
    medium_articles = search_medium(last_theme)  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –ø–æ —Ç–µ–º–µ
    

    materials_message = f"üìö *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–µ:* {last_theme}\n\n"

    if arxiv_papers:
        materials_message = f"üîπ *ArXiv:*\n{arxiv_papers}\n\n"
    if medium_articles:
        materials_message = f"üîπ *Medium:*\n{medium_articles}\n\n"

    bot.send_message(message.chat.id, materials_message, parse_mode="Markdown")            


@bot.message_handler(commands=['profile'])
def profile(message):
    user_id = message.from_user.id
    data = load_data()
    user_data = data["users"].get(str(user_id))

    if not user_data:
        bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return
    
    exp = user_data["progress"].get("experience",0)
    level = user_data["progress"].get("level",1)
    achievements = user_data["progress"].get("achievements", [])

    achievements_text = "\n".join([f"üèÖ {ach} " for ach in achievements]) if achievements else "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."

    bot.send_message(message.chat.id, f"üéñ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
                                      f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: {level}\n"
                                      f"üîπ–û–ø—ã—Ç: {exp} XP\n"
                                      f"üèÜ–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n{achievements_text}",
                    parse_mode="Markdown")

def escape_markdown(text):
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return re.sub(f"([{re.escape(escape_chars)}])", r'\\\1', text)



# command /leaderboard
@bot.message_handler(commands=['leaderboard'])
def leaderboard(message):
    data = load_data()
    users = data["users"]

    leaderboard = sorted(users.items(), key=lambda x: x[1]["progress"].get("experience", 0), reverse=True)

    top_users = leaderboard[:10]
    leaderboard_text = "\n".join([f"üèÖ {i+1}. @{escape_markdown(user[1]['username'])} - {user[1]['progress'].get('experience', 0)} XP"
                                  for i,user in enumerate(top_users)])
    
    bot.send_message(message.chat.id, f"üìä *–¢–æ–ø-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n{leaderboard_text}", parse_mode="Markdown")



# command /search
@bot.message_handler(commands=['search'])
def search_materials(message):
    user_query = message.text.replace("/search", "").strip()

    if not user_query:
        bot.send_message(message.chat.id, "‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä `/search –Ω–µ–π—Ä–æ—Å–µ—Ç–∏`", parse_mode="Markdown")
        return
    
    bot.send_message(message.chat.id, f"üîç –ò—â—É –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{user_query}*...")

    additional_materials = get_additional_materials_for_topic_with_llama(user_query)
    bot.send_message(message.chat.id, f"üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–µ:\n\n{additional_materials}", parse_mode="Markdown") 

















# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(timeout=30, long_polling_timeout=30)
while True:
    try:
        bot.polling(timeout=30, long_polling_timeout=30)
    except requests.exceptions.ReadTimeout:
        print("Read timeout error, retrying...")
        time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    except Exception as e:
        print(f"An error occurred: {e}")
        time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

